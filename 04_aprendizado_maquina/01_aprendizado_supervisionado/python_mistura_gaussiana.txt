# Importando as bibliotecas necessárias
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.mixture import GaussianMixture
from sklearn.metrics import confusion_matrix
from scipy.stats import mode

# Carregando o conjunto de dados Iris
iris = load_iris()
X = iris.data  # Atributos (features)
y = iris.target  # Rótulos reais das flores (para comparação)

# Aplicando o Modelo de Mistura Gaussiana (GMM) com 3 componentes (pois sabemos que há 3 classes no conjunto Iris)
gmm = GaussianMixture(n_components=3, random_state=42)
gmm.fit(X)

# Prevendo os clusters com base no modelo treinado
y_pred = gmm.predict(X)

# Visualizando os clusters em um gráfico 2D (usaremos as duas primeiras características: Sepal Length e Sepal Width)
plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], X[:, 1], c=y_pred, s=50, cmap='viridis', marker='o')

# Trazendo os centroides dos clusters para o gráfico
means = gmm.means_
plt.scatter(means[:, 0], means[:, 1], c='red', s=200, marker='X', label='Centroides')
plt.title('Clusters Formados pelo Modelo de Mistura Gaussiana (GMM)')
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.legend()
plt.show()

# Avaliando o modelo: Média Log-Verossimilhança
log_likelihood = gmm.score(X)
print(f'\nMédia Log-Verossimilhança: {log_likelihood:.4f}')

# Exibindo a matriz de confusão
cm = confusion_matrix(y, y_pred)
print('\nMatriz de Confusão:')
print(cm)

# Visualizando a matriz de confusão com o seaborn
plt.figure(figsize=(6,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.title('Matriz de Confusão: GMM vs Rótulos Reais')
plt.xlabel('Clusters Preditos')
plt.ylabel('Rótulos Reais')
plt.show()

# Comparando os clusters preditos com os rótulos reais (usando as classes do Iris)
# Como o GMM não sabe os rótulos reais, faremos o mapeamento dos clusters para as classes reais
# Utilizando a mesma técnica de mapeamento que usamos no K-Means

# Encontrando o rótulo de cada cluster (usando o modo da classe real dos pontos atribuídos a cada cluster)
cluster_labels = np.zeros_like(y_pred)

for i in range(3):
    mask = (y_pred == i)
    cluster_labels[mask] = mode(y[mask])[0]

# Exibindo a matriz de confusão após o mapeamento
cm_mapped = confusion_matrix(y, cluster_labels)
print('\nMatriz de Confusão Após Mapeamento:')
print(cm_mapped)

# Visualizando a matriz de confusão mapeada
plt.figure(figsize=(6,6))
sns.heatmap(cm_mapped, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.title('Matriz de Confusão: GMM Mapeado para Classes Reais')
plt.xlabel('Classes Reais')
plt.ylabel('Clusters Preditos')
plt.show()
