# Importando as bibliotecas necessárias
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Carregando o conjunto de dados Iris
iris = load_iris()
X = iris.data  # Atributos (features)
y = iris.target  # Rótulos reais das flores (para comparação)

# Aplicando o algoritmo K-Means com 3 clusters (pois sabemos que há 3 classes no conjunto Iris)
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)

# Previsões (os rótulos atribuídos pelo K-Means)
y_kmeans = kmeans.predict(X)

# Visualizando os centroides dos clusters
centroids = kmeans.cluster_centers_

# Visualizando os clusters em um gráfico 2D (usaremos as duas primeiras características: sepal length e sepal width)
plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis', marker='o')

# Plotando os centroides dos clusters
plt.scatter(centroids[:, 0], centroids[:, 1], c='red', s=200, marker='X', label='Centroides')
plt.title('Clusters Formados pelo K-Means (usando Sepal Length e Sepal Width)')
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.legend()
plt.show()

# Avaliando o modelo: Pontuação de Silhueta
sil_score = silhouette_score(X, y_kmeans)
print(f"Pontuação de Silhueta: {sil_score:.4f}")

# Exibindo a matriz de confusão
cm = confusion_matrix(y, y_kmeans)
print('\nMatriz de Confusão:')
print(cm)

# Visualizando a matriz de confusão com o seaborn
plt.figure(figsize=(6,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.title('Matriz de Confusão: K-Means vs Rótulos Reais')
plt.xlabel('Clusters Preditos')
plt.ylabel('Rótulos Reais')
plt.show()

# Comparando as classes reais com os clusters preditos
# O algoritmo K-Means não sabe os rótulos reais, então podemos tentar comparar os clusters com as classes reais
# Para isso, vamos mapear os clusters para as classes reais da maneira mais próxima possível
from scipy.stats import mode

# Encontrando o rótulo de cada cluster (usando o modo da classe real dos pontos atribuídos a cada cluster)
cluster_labels = np.zeros_like(y_kmeans)

for i in range(3):
    mask = (y_kmeans == i)
    cluster_labels[mask] = mode(y[mask])[0]

# Exibindo a matriz de confusão entre as classes reais e as predições mapeadas
cm_mapped = confusion_matrix(y, cluster_labels)
print('\nMatriz de Confusão Após Mapeamento:')
print(cm_mapped)

# Visualizando a matriz de confusão mapeada
plt.figure(figsize=(6,6))
sns.heatmap(cm_mapped, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.title('Matriz de Confusão: K-Means Mapeado para Classes Reais')
plt.xlabel('Classes Reais')
plt.ylabel('Clusters Preditos')
plt.show()
