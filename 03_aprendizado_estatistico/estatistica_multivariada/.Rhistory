factor_analysis_none$loadings[, 2],
xlab = "Factor 1",
ylab = "Factor 2",
ylim = c(-1, 1),
xlim = c(-1, 1),
main = "No rotation")
text(factor_analysis_none$loadings[, 1] - 0.08,
factor_analysis_none$loadings[, 2] + 0.08,
colnames(mtcars),
col = "blue")
abline(h = 0, v = 0)
plot(factor_analysis_varimax$loadings[, 1],
factor_analysis_varimax$loadings[, 2],
xlab = "Factor 1",
ylab = "Factor 2",
ylim = c(-1, 1),
xlim = c(-1, 1),
main = "Varimax rotation")
text(factor_analysis_varimax$loadings[, 1] - 0.08,
factor_analysis_varimax$loadings[, 2] + 0.08,
colnames(mtcars),
col = "blue")
abline(h = 0, v = 0)
plot(factor_analysis_promax$loadings[, 1],
factor_analysis_promax$loadings[, 2],
xlab = "Factor 1",
ylab = "Factor 2",
ylim = c(-1, 1),
xlim = c(-1, 1),
main = "Promax rotation")
text(factor_analysis_promax$loadings[, 1] - 0.08,
factor_analysis_promax$loadings[, 2] + 0.08,
colnames(mtcars),
col = "blue")
abline(h = 0, v = 0)
v1 <- c(1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,4,5,6)
v2 <- c(1,2,1,1,1,1,2,1,2,1,3,4,3,3,3,4,6,5)
v3 <- c(3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,5,4,6)
v4 <- c(3,3,4,3,3,1,1,2,1,1,1,1,2,1,1,5,6,4)
v5 <- c(1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,6,4,5)
v6 <- c(1,1,1,2,1,3,3,3,4,3,1,1,1,2,1,6,5,4)
m1 <- cbind(v1,v2,v3,v4,v5,v6)
cor(m1)
factanal(m1, factors = 3) # varimax is the default
factanal(m1, factors = 3, rotation = "promax")
# The following shows the g factor as PC1
prcomp(m1) # signs may depend on platform
## formula interface
factanal(~v1+v2+v3+v4+v5+v6, factors = 3,
scores = "Bartlett")$scores
# data
data = read_csv("rte_cereal.csv")
data = data.frame(data)
# view data
head(data)
# change col names
#colnames(data)[1] <- "Voluntário"
#colnames(data)[2] <- "Cereal"
colnames(data) <- c("Voluntário", "Cereal",
'Satisfaz','Natural','Fibra','Doce','Fácil','Sal','Gratificante','Energia',
'Divertido','Crianças','Encharcado','Econômico','Saúde','Família','Calorias',
'Simples', 'Crocante', 'Regular', 'Açúcar', 'Fruta', 'Processo', 'Qualidade',
'Prazer', 'Chato', 'Nutritivo')
head(data)
# correlation graph
corrplot(cor(data), method="ellipse")
# AF
af_data = factanal(data, factors = 4) # varimax is the default
af_data
# loadings
load = af_data$loadings[,1:4]
load = data.frame(load)
# data
data = read_csv("rte_cereal.csv")
setwd("D:/OneDrive/Documents/01_Collection/04_Codes/codes_book/estatistica_multivariada")
# data
data = read_csv("rte_cereal.csv")
rte_cereal <- read.csv("D:/OneDrive/Documents/01_Collection/04_Codes/codes_book/estatistica_multivariada/rte_cereal.csv", header=FALSE)
View(rte_cereal)
# data
#data = read_csv("rte_cereal.csv")
data <- read.csv("D:/OneDrive/Documents/01_Collection/04_Codes/codes_book/estatistica_multivariada/rte_cereal.csv", header=FALSE)
data = data.frame(data)
# view data
head(data)
# ------------------------------------------------------------------------------
# Application 1
# ------------------------------------------------------------------------------
# packages
library('FactoMineR') #onde os dados estão
library("devtools") #ferramenta para ACP
library("factoextra") #ferramenta para ACP
# packages
library('FactoMineR') #onde os dados estão
library("devtools") #ferramenta para ACP
library("factoextra") #ferramenta para ACP
# data
data(decathlon2)
head(decathlon2[, 1:6])
# Extracting variables for principal component analysis:
decathlon2.active <- decathlon2[1:23, 1:10]
head(decathlon2.active[, 1:6])
# descriptive
decathlon2.active_stats <- data.frame(
Min = apply(decathlon2.active, 2, min), # minimum
Q1 = apply(decathlon2.active, 2, quantile, 1/4), # First quartile
Med = apply(decathlon2.active, 2, median), # median
Mean = apply(decathlon2.active, 2, mean), # mean
Q3 = apply(decathlon2.active, 2, quantile, 3/4), # Third quartile
Max = apply(decathlon2.active, 2, max) # Maximum
)
decathlon2.active_stats <- round(decathlon2.active_stats, 1)
head(decathlon2.active_stats)
# correlation matrix
cor.mat <- round(cor(decathlon2.active),2)
head(cor.mat[, 1:6])
# correlation graph
library("corrplot")
corrplot(cor.mat, type="upper", order="hclust",
tl.col="black", tl.srt=45)
library("PerformanceAnalytics")
chart.Correlation(decathlon2.active[, 1:6], histogram=TRUE, pch=19)
# Principal Component Analysis
res.pca <- prcomp(decathlon2.active, scale = TRUE)
res.pca
#Variances of the principal components
fviz_screeplot(res.pca, ncp=10)
# circular plot
fviz_pca_var(res.pca)
# circular plot (change color)
fviz_pca_var(res.pca, col.var="steelblue")+
theme_minimal()
# circular plot (change color)
fviz_pca_var(res.pca, col.var="contrib")
# circular plot (change color)
fviz_pca_var(res.pca, col.var="contrib")+
scale_color_gradient2(low="blue", mid="white",
high="red", midpoint=55)+theme_bw()
# circular plot (change color)
fviz_pca_var(res.pca, alpha.var="contrib")+
theme_minimal()
# biplot
fviz_pca_biplot(res.pca,  geom = "text")
# data
head(USArrests)
# calculate principal components
results <- prcomp(USArrests, scale = TRUE)
# reverse the signs
results$rotation <- -1*results$rotation
#display principal components
results$rotation
# reverse the signs of the scores
results$x <- -1*results$x
# display the first six scores
head(results$x)
#biplot
biplot(results, scale = 0)
#display states with highest murder rates in original dataset
head(USArrests[order(-USArrests$Murder),])
#calculate total variance explained by each principal component
results$sdev^2 / sum(results$sdev^2)
#calculate total variance explained by each principal component
var_explained = results$sdev^2 / sum(results$sdev^2)
#create scree plot
qplot(c(1:4), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
# data
data("iris")
# exploratory
str(iris)
# graphs
library(psych)
pairs.panels(iris[,-5],
gap = 0,
bg = c("red", "yellow", "blue")[iris$Species],
pch=21)
# pca
pc <- prcomp(iris[,-5],
center = TRUE,
scale. = TRUE)
#attributes(pc)
pc
# exploratory pca
pairs.panels(pc$x,
gap=0,
bg = c("red", "yellow", "blue")[iris$Species],
pch=21)
# biplot
library(devtools)
library(ggbiplot)
g <- ggbiplot(pc,
obs.scale = 1,
var.scale = 1,
groups = iris$Species,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
# ------------------------------------------------------------------------------
# Application 1
# ------------------------------------------------------------------------------
# necessary packages
library(psych)
library(corrplot)
library(nFactors)
# ------------------------------------------------------------------------------
# Application 1
# ------------------------------------------------------------------------------
# necessary packages
library(psych)
library(corrplot)
library(nFactors)
# load dataset
data(mtcars)
# show dataset
head(mtcars)
# show dataset
dim(mtcars)
# correlation graph
corrplot(cor(mtcars), method="ellipse")
# Factor analysis
factor_analysis = factanal(mtcars, factors = 3, rotation = "varimax")
factor_analysis
# factor plots
load = factor_analysis$loadings[,1:2]
plot(load,type="n")
text(load,labels=names(mtcars),cex=.7, col = 1)
# factor plots
library(FactoMineR)
result <- PCA(mtcars)
# loadings
fa1 <- factanal(mtcars, factors = 3, scores = "regression")
fa1$scores
# different rotations
factor_analysis_none = factanal(mtcars, factors = 2, rotation = "none")
factor_analysis_varimax = factanal(mtcars, factors = 2, rotation = "varimax")
factor_analysis_promax = factanal(mtcars, factors = 2, rotation = "promax")
# graph for these rotations
par(mfrow = c(1, 3))
plot(factor_analysis_none$loadings[, 1],
factor_analysis_none$loadings[, 2],
xlab = "Factor 1",
ylab = "Factor 2",
ylim = c(-1, 1),
xlim = c(-1, 1),
main = "No rotation")
text(factor_analysis_none$loadings[, 1] - 0.08,
factor_analysis_none$loadings[, 2] + 0.08,
colnames(mtcars),
col = "blue")
abline(h = 0, v = 0)
plot(factor_analysis_varimax$loadings[, 1],
factor_analysis_varimax$loadings[, 2],
xlab = "Factor 1",
ylab = "Factor 2",
ylim = c(-1, 1),
xlim = c(-1, 1),
main = "Varimax rotation")
text(factor_analysis_varimax$loadings[, 1] - 0.08,
factor_analysis_varimax$loadings[, 2] + 0.08,
colnames(mtcars),
col = "blue")
abline(h = 0, v = 0)
plot(factor_analysis_promax$loadings[, 1],
factor_analysis_promax$loadings[, 2],
xlab = "Factor 1",
ylab = "Factor 2",
ylim = c(-1, 1),
xlim = c(-1, 1),
main = "Promax rotation")
text(factor_analysis_promax$loadings[, 1] - 0.08,
factor_analysis_promax$loadings[, 2] + 0.08,
colnames(mtcars),
col = "blue")
abline(h = 0, v = 0)
v1 <- c(1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,4,5,6)
v2 <- c(1,2,1,1,1,1,2,1,2,1,3,4,3,3,3,4,6,5)
v3 <- c(3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,5,4,6)
v4 <- c(3,3,4,3,3,1,1,2,1,1,1,1,2,1,1,5,6,4)
v5 <- c(1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,6,4,5)
v6 <- c(1,1,1,2,1,3,3,3,4,3,1,1,1,2,1,6,5,4)
m1 <- cbind(v1,v2,v3,v4,v5,v6)
cor(m1)
factanal(m1, factors = 3) # varimax is the default
factanal(m1, factors = 3, rotation = "promax")
# The following shows the g factor as PC1
prcomp(m1) # signs may depend on platform
## formula interface
factanal(~v1+v2+v3+v4+v5+v6, factors = 3,
scores = "Bartlett")$scores
# data
#data = read_csv("rte_cereal.csv")
data <- read.csv("D:/OneDrive/Documents/01_Collection/04_Codes/codes_book/estatistica_multivariada/rte_cereal.csv", header=FALSE)
data = data.frame(data)
# view data
head(data)
# change col names
#colnames(data)[1] <- "Voluntário"
#colnames(data)[2] <- "Cereal"
colnames(data) <- c("Voluntário", "Cereal",
'Satisfaz','Natural','Fibra','Doce','Fácil','Sal','Gratificante','Energia',
'Divertido','Crianças','Encharcado','Econômico','Saúde','Família','Calorias',
'Simples', 'Crocante', 'Regular', 'Açúcar', 'Fruta', 'Processo', 'Qualidade',
'Prazer', 'Chato', 'Nutritivo')
head(data)
# correlation graph
corrplot(cor(data), method="ellipse")
# AF
af_data = factanal(data, factors = 4) # varimax is the default
af_data
# correlation graph
corrplot(cor(data), method="ellipse")
data
# data
#data = read_csv("rte_cereal.csv")
data <- read.csv("D:/OneDrive/Documents/01_Collection/04_Codes/codes_book/estatistica_multivariada/rte_cereal.csv", header=FALSE)
data = data.frame(data)
# view data
head(data)
# data
#data = read_csv("rte_cereal.csv")
data <- read.csv("D:/OneDrive/Documents/01_Collection/04_Codes/codes_book/estatistica_multivariada/rte_cereal.csv", header=TRUE)
data = data.frame(data)
# view data
head(data)
# change col names
#colnames(data)[1] <- "Voluntário"
#colnames(data)[2] <- "Cereal"
colnames(data) <- c("Voluntário", "Cereal",
'Satisfaz','Natural','Fibra','Doce','Fácil','Sal','Gratificante','Energia',
'Divertido','Crianças','Encharcado','Econômico','Saúde','Família','Calorias',
'Simples', 'Crocante', 'Regular', 'Açúcar', 'Fruta', 'Processo', 'Qualidade',
'Prazer', 'Chato', 'Nutritivo')
head(data)
# correlation graph
corrplot(cor(data), method="ellipse")
# correlation graph
corrplot(cor(data), method="ellipse")
# AF
af_data = factanal(data, factors = 4) # varimax is the default
af_data
# loadings
load = af_data$loadings[,1:4]
load = data.frame(load)
# Greater loadings on the 1st two factors
load <- load[order(load$Factor1, decreasing = TRUE),]
load
# Greater loadings on the 2nd two factors
load <- load[order(load$Factor2, decreasing = TRUE),]
load
# Greater loadings on the 3th two factors
load <- load[order(load$Factor3, decreasing = TRUE),]
load
# Greater loadings on the 4th two factors
load <- load[order(load$Factor4, decreasing = TRUE),]
load
# packages
library('FactoMineR') #onde os dados estão
library("devtools") #ferramenta para ACP
library("factoextra") #ferramenta para ACP
# packages
library('FactoMineR') #onde os dados estão
library("devtools") #ferramenta para ACP
library("factoextra") #ferramenta para ACP
library('FactoMineR') #onde os dados estão
library("devtools") #ferramenta para ACP
library("factoextra") #ferramenta para ACP
# data
data(decathlon2)
head(decathlon2[, 1:6])
# Extracting variables for principal component analysis:
decathlon2.active <- decathlon2[1:23, 1:10]
head(decathlon2.active[, 1:6])
decathlon2.active_stats <- data.frame(
Min = apply(decathlon2.active, 2, min), # minimum
Q1 = apply(decathlon2.active, 2, quantile, 1/4), # First quartile
Med = apply(decathlon2.active, 2, median), # median
Mean = apply(decathlon2.active, 2, mean), # mean
Q3 = apply(decathlon2.active, 2, quantile, 3/4), # Third quartile
Max = apply(decathlon2.active, 2, max) # Maximum
)
decathlon2.active_stats <- round(decathlon2.active_stats, 1)
head(decathlon2.active_stats)
# correlation matrix
cor.mat <- round(cor(decathlon2.active),2)
head(cor.mat[, 1:6])
# correlation graph
library("corrplot")
corrplot(cor.mat, type="upper", order="hclust",
tl.col="black", tl.srt=45)
library("PerformanceAnalytics")
chart.Correlation(decathlon2.active[, 1:6], histogram=TRUE, pch=19)
# Principal Component Analysis
res.pca <- prcomp(decathlon2.active, scale = TRUE)
res.pca
# Principal Component Analysis
res.pca <- prcomp(decathlon2.active, scale = TRUE)
res.pca
#Variances of the principal components
fviz_screeplot(res.pca, ncp=10)
# data
head(USArrests)
# calculate principal components
results <- prcomp(USArrests, scale = TRUE)
# calculate principal components
results <- prcomp(USArrests, scale = TRUE)
results
res.pca <- prcomp(decathlon2.active, scale = TRUE)
res.pca
res.pca <- prcomp(decathlon2.active, scale = TRUE)
res.pca
names(res.pca)
res.pca$rotation
head(decathlon2.active[, 1:6])
# calculate principal components
results <- prcomp(USArrests, scale = TRUE)
results
# data
head(USArrests)
#data = read_csv("rte_cereal.csv")
data <- read.csv("D:/OneDrive/Documents/01_Collection/04_Codes/codes_book/estatistica_multivariada/rte_cereal.csv", header=TRUE)
data = data.frame(data)
# data
#data = read_csv("rte_cereal.csv")
data <- read.csv("D:/OneDrive/Documents/01_Collection/04_Codes/codes_book/estatistica_multivariada/rte_cereal.csv", header=TRUE)
data = data.frame(data)
# view data
head(data)
#colnames(data)[2] <- "Cereal"
colnames(data) <- c("Voluntário", "Cereal",
'Satisfaz','Natural','Fibra','Doce','Fácil','Sal','Gratificante','Energia',
'Divertido','Crianças','Encharcado','Econômico','Saúde','Família','Calorias',
'Simples', 'Crocante', 'Regular', 'Açúcar', 'Fruta', 'Processo', 'Qualidade',
'Prazer', 'Chato', 'Nutritivo')
head(data)
# correlation graph
corrplot(cor(data), method="ellipse")
# AF
af_data = factanal(data, factors = 4) # varimax is the default
af_data
# Subject: Multivariate Statistic
# Lecture: Principal Components Analysis
# Author: Vinicius Osterne (www.osterne.com)
# ------------------------------------------------------------------------------
# Application 1
# ------------------------------------------------------------------------------
# packages
library('FactoMineR') #onde os dados estão
library("devtools") #ferramenta para ACP
library("factoextra") #ferramenta para ACP
# data
data(decathlon2)
head(decathlon2[, 1:6])
# Extracting variables for principal component analysis:
decathlon2.active <- decathlon2[1:23, 1:10]
head(decathlon2.active[, 1:6])
# ------------------------------------------------------------------------------
# Application 1
# ------------------------------------------------------------------------------
# packages
library('FactoMineR') #onde os dados estão
library("devtools") #ferramenta para ACP
library("factoextra") #ferramenta para ACP
# data
data(decathlon2)
head(decathlon2[, 1:6])
# Extracting variables for principal component analysis:
decathlon2.active <- decathlon2[1:23, 1:10]
head(decathlon2.active[, 1:6])
# descriptive
decathlon2.active_stats <- data.frame(
Min = apply(decathlon2.active, 2, min), # minimum
Q1 = apply(decathlon2.active, 2, quantile, 1/4), # First quartile
Med = apply(decathlon2.active, 2, median), # median
Mean = apply(decathlon2.active, 2, mean), # mean
Q3 = apply(decathlon2.active, 2, quantile, 3/4), # Third quartile
Max = apply(decathlon2.active, 2, max) # Maximum
)
decathlon2.active_stats <- round(decathlon2.active_stats, 1)
head(decathlon2.active_stats)
# correlation matrix
cor.mat <- round(cor(decathlon2.active),2)
head(cor.mat[, 1:6])
# casas decimais
# 0 -- 9: uma casa decimal
## 10 -- 99: duas casas decimais
## 100 -- 999: três casas decimais
# correlation graph
library("corrplot")
corrplot(cor.mat, type="upper", order="hclust",
tl.col="black", tl.srt=45)
library("PerformanceAnalytics")
chart.Correlation(decathlon2.active[, 1:6], histogram=TRUE, pch=19)
# Principal Component Analysis
res.pca <- prcomp(decathlon2.active, scale = TRUE)
res.pca
names(res.pca)
#Variances of the principal components
fviz_screeplot(res.pca, ncp=10)
# correlation graph
library("corrplot")
corrplot(cor.mat, type="upper", order="hclust",
tl.col="black", tl.srt=45)
library("PerformanceAnalytics")
chart.Correlation(decathlon2.active[, 1:6], histogram=TRUE, pch=19)
